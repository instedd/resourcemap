onLayers ->
  class @MainViewModel
    constructor: (collectionId, layers) ->
      self = @

      @collectionId = collectionId
      @layers = ko.observableArray $.map(layers, (x) -> new Layer(x))
      @currentLayer = ko.observable()
      @currentField = ko.observable()

      @newOption = ko.observable(new Option)
      @newAttribute = ko.observable(new Attribute)

      @optionValid = ko.computed =>
        $.trim(@newOption().code()).length > 0 && $.trim(@newOption().label()).length > 0

      @attributeValid = ko.computed =>
        $.trim(@newAttribute().key()).length > 0 && $.trim(@newAttribute().value()).length > 0 && not Attribute.find(@currentField().attributes(), @newAttribute())

      @optionsLayers = ko.observableArray $.map(@layers(), (l) -> [[l.name(), l.id()]])

      @currentFieldMarginTop = ko.computed =>
        if @currentLayer()
          idx = @currentLayer().fields().indexOf(@currentField())
          margin = idx * 70
          "#{margin}px"
        else
          0

      @savingLayer = ko.observable(false)

      @currentHierarchyUnderEdition = ko.observable()
      @currentHierarchyFieldName = ko.observable(__("Hierarchy Editor"))

      @expandedUploadCSV = ko.observable(false)

      @advancedExpanded = ko.observable(false)

      @selectedImportCollectionId = ko.observable(0)

      @adminCollections = ko.observableArray([])

      @importCollectionIds = ko.computed =>
        $.map(@adminCollections(), (c) -> c.id)

      $.get "/memberships/collections_i_admin.json", {except_id: @collectionId}, (collection_ids) =>
        self.adminCollections(collection_ids)

    importLayersFromCollection: =>
      window.location.href = "/collections/#{@collectionId}/import_layers_from/#{@selectedImportCollectionId()}"

    importCollectionLabelFor: (o) =>
      return 'loading...' if o == 0
      _.chain(@adminCollections()).filter((c) -> c.id == o).map((c) -> c.name).value()[0]

    toggleAdvancedExpanded: =>
      @advancedExpanded(not @advancedExpanded())

    toggleExpandUploadCSV: =>
      @expandedUploadCSV(not @expandedUploadCSV())

    selectingLayer: () ->

    newLayer: =>
      layer = new Layer ord: (@layers().length + 1)
      @layers.push(layer)
      @currentLayer(layer)
      layer.hasFocus(true)

    editLayer: (layer) =>
      @originalFields = $.map(layer.fields(), (x) -> new Field(layer, x.toJSON()))
      @currentLayer(layer)
      @currentField(layer.fields()[0]) if layer.fields().length > 0
      layer.hasFocus(true)

    cancelLayer: =>
      if @currentLayer().id()
        @currentLayer().fields.removeAll()
        @currentLayer().fields.push(field) for field in @originalFields
      else
        @layers.remove(@currentLayer()) unless @currentLayer().id()
      @currentLayer(null)
      @currentField(null)

    saveLayer: =>
      @savingLayer(true)

      json = {layer: @currentLayer().toJSON()}

      if @currentLayer().id()
        json._method = 'put'
        $.post "/collections/#{@collectionId}/layers/#{@currentLayer().id()}.json", json, @saveLayerCallback
      else
        $.post "/collections/#{@collectionId}/layers.json", json, @saveLayerCallback

    saveLayerCallback: (data) =>
      #if layer is new, we need to set id
      if @currentLayer().id()
        notice = Jed.sprintf(__("Layer '%s' successfully saved"), @currentLayer().name())
      else
        notice = Jed.sprintf(__("Layer '%s' successfully saved"), @currentLayer().name())

      $.status.showNotice(notice, 2000)

      @currentLayer().id(data.id)

      layersToReloadOrder = [@currentLayer()]

      i = 0
      while i < @currentLayer().fields().length
        field = @currentLayer().fields()[i]
        dataField = (dataField for dataField in data.fields when dataField.code is field.code())
        if dataField.length
          i += 1
          #if field is new, we need to set id
          field.id(dataField[0].id)
        else
          field.layer().fields().push(field)
          layersToReloadOrder.push(field.layer())
          @currentLayer().fields.remove(field)
          # i does not change because we just removed an element

      @reloadOrder(layer) for layer in layersToReloadOrder

      @currentLayer(null)
      @currentField(null)

      @savingLayer(false)

    saveLayerOrd: (layer) =>
      json = {ord: layer.ord()}

      json._method = 'put'
      $.post "/collections/#{@collectionId}/layers/#{layer.id()}/set_order.json", json

    # Takes an array of layers, extracts their id's and posts them to the server,
    # which will then update the layers' ord properties based on that
    saveAllLayersOrder: (layers) =>
      $.post "/collections/#{@collectionId}/layers/order.json", {order: $.map(layers, (l) -> l.id())}, =>
        _.each(layers, (l, index) => l.ord(index + 1))

    deleteLayer: (layer) =>
      confirmation = Jed.sprintf(__("Are you sure you want to delete layer %s"), layer.name())

      if confirm(confirmation)
        $.post "/collections/#{@collectionId}/layers/#{layer.id()}", {_method: 'delete'}, =>
          idx = @layers().indexOf(layer)
          for nextLayer in @layers().slice(idx + 1)
            nextLayer.ord(nextLayer.ord() - 1)
            @saveLayerOrd(nextLayer)

          @layers.remove(layer)

          notice = Jed.sprintf(__("Layer %s successfully deleted"), layer.name())

          $.status.showNotice(notice, 2000)

    isFirstLayer: (layer) => layer.ord() == 1
    isLastLayer: (layer) => layer.ord() == @layers().length

    isFirstField: (layer, field) => field.ord() == 1
    isLastField: (layer, field) => field.ord() == layer.fields().length

    # Each time a user drags&drops a field to reorder, this callback gets called
    # When that happens, the fields observable array is the source of truth,
    # so we need to update the ord property of each of them.
    resortFields: (_draggedData) =>
      _.each(@currentLayer().fields(), (field, index) => field.ord(index + 1))

    # Similar to `resortFields`. The difference is that there's no save button
    # for layer ordering, so each drop actually causes a roundtrip to the server
    # See `saveAllLayersOrder` for more details.
    resortLayers: (_draggedData) => @saveAllLayersOrder(@layers())

    newField: (kind) =>
      @currentField(new Field(@currentLayer(), kind: kind, ord: @currentLayer().fields().length + 1))
      @currentLayer().fields.push(@currentField())
      @currentField().hasFocus(true)

    selectField: (field) =>
      return if @currentField() == field
      @currentField(field)
      @currentField().hasFocus(true)

    reloadOrder: (layer) =>
      i = 1
      for field in layer.fields()
        field.ord(i)
        i += 1

    deleteField: (field) =>
      idx = @currentLayer().fields().indexOf(field)
      nextField.ord(nextField.ord() - 1) for nextField in @currentLayer().fields().slice(idx + 1)
      @currentLayer().fields.remove(field)
      if @currentLayer().fields().length == 0
        @currentField(null)
      else
        idx -= 1 if idx >= @currentLayer().fields().length
        @currentField(@currentLayer().fields()[idx])
        @currentField().hasFocus(true)

    newOptionKeyPress: (field, event) =>
      switch event.keyCode
        when 13 then @addOption()
        else true

    newAttributeKeyPress: (field, event) =>
      switch event.keyCode
        when 13 then @addAttribute()
        else true

    optionBlur: (option) =>
      option.editing(false)
      if $.trim(option.code()).length == 0 && $.trim(option.length()).length == 0
        @removeOption(option)

    attributeBlur: (attribute) =>
      attribute.editing(false)
      if $.trim(attribute.code()).length == 0 && $.trim(attribute.length()).length == 0
        @removeAttribute(attribute)

    addOption: =>
      return unless @optionValid()
      @newOption().hasFocus = false
      @currentField().impl().addOption(@newOption())
      option = new Option
      option.hasFocus(true)
      @newOption(option)

    addAttribute: =>
      return unless @attributeValid()
      @newAttribute().hasFocus = false
      @currentField().addAttribute(@newAttribute())
      attribute = new Attribute
      attribute.hasFocus(true)
      @newAttribute(attribute)

    removeOption: (option) =>
      @currentField().impl().options.remove(option)
      @newOption().hasFocus(true)

    removeAttribute: (attribute) =>
      @currentField().attributes.remove(attribute)
      @newAttribute().hasFocus(true)

    openHierarchyEditor:  =>
      @currentHierarchyUnderEdition(new Hierarchy(@currentField()))

      if @currentField().name()
        title = Jed.sprintf(__('Hierarchy Editor for %s field'), @currentField().name())
      else
        title =  __('Hierarchy Editor')

      @currentHierarchyFieldName(title)
      true


    startUploadHierarchy: =>
      @currentField().impl().uploadingHierarchy(true)

    hierarchyUploaded: (hierarchy) =>
      @currentField().impl().setHierarchy(hierarchy)

    errorUploadingHierarchy: (hierarchy_errors) =>
      @currentField().impl().uploadingHierarchy(false)
      @currentField().impl().errorUploadingHierarchy(true)

      $('.error_description_bubble').CreateBubblePopup({
        selectable: true,
        position : 'top',
        innerHtml: hierarchy_errors,
        innerHtmlStyle: {
            color:'#000000',
            'background-color' :'white'
            },
        themeName:  'bubble',
        themePath:  '<%= InsteddRails.url %>/theme/images/'

      });
