.left.panel{ko(css: { wp30: '!expandLeftColumn()', wp50: 'expandLeftColumn()' })}
  /ko if: !loadingSite()

  -# Collections
  /ko if: !currentCollection() && !editingSite()
  .tableheader
    .title My Collections
  .tablescroll.cheight.sites
    %table.GralTable.CleanTable
      %tbody
        /ko foreach: collections
        %tr
          %td.collectionCell{ko(css: {with_snapshot: 'currentSnapshot'})}
            %input{ko(checked: :checked), type: :checkbox}
            %a.collectionName{ko(text: :name, attr: {title: :name}, click: '$root.enterCollection')}"
            %button.enterRow.farrow{ko(click: '$root.enterCollection'), type: :button}
            /ko if: currentSnapshot
            .snapshot_on.right
              .i18g-snapshot
            .clear
            //ko
        //ko
    %br{:clear => "all"}/

  - if can? :create, Collection
    .tablebottom{ko(click: '$root.createCollection')}
      %button.cadd{type: "button"}
      %span.createCollection Create Collection
  //ko

  -# Collection sites
  /ko if: !editingSite()
  /ko with: currentCollection
  .tableheader
    .title
      - if can? :index, Collection
        %button.pback{ko(click: '$root.goToRoot'), type: 'button', style: "#{if current_user.is_guest then 'visibility: hidden;margin-left: -20px;' end}"}
      %span{ko(text: :name, attr: {title: :name})}
      - #if can? :show, collection
      - if !current_user.is_guest
        %button.fconfiguration.right{ko(click: '$root.editCollection'), type: 'button'}

  .tablescroll.cheight.sites
    %table.GralTable.CleanTable
      %tbody
        /ko if: !isSearch() && $root.groupBy().esCode != ''
        /ko template: {name: 'map-hierarchy-items-template', with: $data}
        //ko
        //ko
        /ko template: {name: 'map-sites-template', with: $data}
        //ko
        /ko if: hasMoreSites() && !loadingSites()
        %tr
          %td.loadmore
            = ko_link_to _("Load more sites..."), :loadMoreSites
        //ko
        /ko if: hasMoreSites() && loadingSites()
        %tr
          %td.loadmore Loading...
        //ko
  .tablebottom
    /ko if: !currentSnapshot
    -# if can? :create, Site
    - if current_user && !current_user.is_guest
      /ko if: anyUpdatePermissions
      %button.flocation{ko(click: '$root.createSite')} Create Site
      //ko
    //ko

  //ko
  //ko

  -# New Site or Edit Site form
  /ko if: newOrEditSite
  %form{ko(with: :newOrEditSite, submit: '$root.saveSite'), novalidate: 'novalidate', action: '#/null', method: :post}
    .tableheader{ko(css: { wp30: '!$root.expandLeftColumn()', wp70: '$root.expandLeftColumn()' })}
      %button.pback{ko(click: '$root.exitSite'), type: 'button'}
      %span
      /ko if: inEditMode()
      %span{ko(text: :name)}
      //ko
      /ko if: !inEditMode()
      %span New Site
      //ko
    .tablescroll.cheight
      %table
        %tbody
          %tr
            %td
              %div
                %span{ko(text: 'collection.nameFieldError', validationPopover: 'collection.nameFieldError'), style: 'display: none;'}
                = label_tag :name, _("Name:")
                /ko if: nameWriteable
                = text_field_tag :name, '', placeholder: _('Enter new site name'),  'data-bind' => kov(value: :name, valueUpdate: :afterkeydown, hasfocus: true, event: {blur: :tryGeolocateName}, css: {error: 'collection.nameFieldError'}), :autofocus => true
                //ko
                /ko if: !nameWriteable
                %span.value{ko(text: :name)}
                //ko

              %div
                %label Location:
                /ko if: locationWriteable
                = ko_text_field_tag :locationText, event: {keydown: :newLocationKeyPress, blur: :moveLocation}, html: {class: 'ux-text', placeholder: _('Search or drag the pin')}
                //ko
                /ko if: ! locationWriteable
                %span.value{ko(text: :locationText)}
                //ko


              /ko if: collection.readable($data)
              /ko foreach: $root.currentCollection().layers()
              %div
                %img{ko(attr: {src: "'#{InsteddRails.url}/theme/images/icons/misc/grey/arrow' + (expanded() ? 'Down' : 'Right') + '.png'"}, click: :toggleExpand), style: "position:relative;top:1px;cursor:pointer", width: 11, height: 11}
                %span{ko(text: :name, click: :toggleExpand)}
              /ko if: expanded()
              /ko foreach: fields
              %div
                %span{ko(text: :errorMessage, validationPopover: :errorMessage), style: 'display: none;'}
                = label_tag '', '', ko(attr: {:for => :esCode}, text: "name + ':'")
                /ko if: !writeable
                %span.value{ko(text: :valueUI)}
                //ko
                /ko if: writeable
                - Field::kinds.each do |kind|
                  = "<!-- ko if: kind == '#{kind}' -->".html_safe
                  = render partial: field_edit_view(kind), locals: { single_editing_mode: false }
                  //ko
                //ko
              //ko
              //ko
              //ko
              //ko
    .tablebottom
      /ko if: collection.error()
      .left.map-bottom-error
        %label.error
          The site cannot be saved due to validation errors
      //ko
      .right
        %button.grey{ko(disable: '$root.savingSite'), type: 'submit'} Done
        %span{ko(click: 'exitEditMode'), style: 'cursor:pointer'} Cancel
      .clear
  //ko

  -# Show Site form
  /ko if: showSite
  %form{ko(with: :showSite, submit: '$root.saveSite'), action: '#/null', method: :post, novalidate: 'novalidate'}
    .tableheader.elipsis
      %button.pback{ko(click: '$root.exitSite'), type: 'button'}
      %span
      %span{ko(text: :name)}
    .tablescroll.cheight.no_h_scrollbar
      %table
        %tbody
          %tr
            %td

              /ko if: nameWriteable
              %div.site_row.writeable{ko(click: 'editName')}
                %label Name:
                %br
                %span.value{ko(text: :name, visible: '!editingName()')}
                /ko if: editingName()
                = ko_text_field_tag :name, visible: 'editingName()', hasfocus: true, event: {keydown: :nameKeyPress, blur: :saveName}
                //ko
              //ko
              /ko if: ! nameWriteable
              %div.site_row
                %label Name:
                %br
                %span.value{ko(text: :name)}
              //ko

              /ko if: locationWriteable
              %div.site_row.writeable{ko(click: 'editLocation')}
                %label Location:
                %br
                /ko if: !hasLocation()
                %span.value{ko(visible: '!editingLocation()')} (no value)
                //ko
                /ko if: hasLocation() && !editingLocation()
                %span.value{ko(text: :locationText, visible: '!editingLocation()')}
                //ko
                /ko if: editingLocation()
                = ko_text_field_tag :locationText, visible: :editingLocation, hasfocus: true, event: {keydown: :locationKeyPress, blur: :saveLocation}, html: {class: 'ux-text'}
                //ko
              //ko
              /ko if: ! locationWriteable
              %div.site_row
                %label Location:
                %span.value{ko(text: :locationText)}
              //ko

              - if Settings.mobile_id?
                %div.site_row
                  %label ID With Prefix:
                  %span.value{ko(text: :idWithPrefix)}
              /ko if: collection.readable($data)
              /ko foreach: collection.layers
              %div.coldiv{ko(css: {coldiv: '!expanded()', expdiv: 'expanded()'}), style: 'margin-top:24px;margin-bottom:14px'}
                %span{ko(text: :name, click: :toggleExpand)}
              /ko if: expanded()
              /ko foreach: fields
              /ko if: writeable
              /- TODO: remove the mousedown handler. Otherwise, there are
              /- situations when clicking on the row doesn't activate the edition
              %div.site_row.writeable{ko(click: 'edit', event: {mousedown: 'notifyEdit'})}
                %span{ko(text: :errorMessage, validationPopover: :errorMessage), style: 'display: none;'}
                %label.field-name{ko(text: "name + ':'", topPopover: "__('Field Code') + ': ' + code", css: { error: :error })}
                /ko if: hasValue() && !error()
                %span.value{ko(text: :valueUI, visible: '!editing()')}
                /ko if: kind == 'site' && !editing() && !error()
                %button.farrow.right{ko(click: 'function(data, event) { $root.editSiteFromId(value(),$root.currentCollection().id) }', clickBubble: false), type: "button"}
                //ko
                //ko
                /ko if: !hasValue() &&  !error()
                %span.value{ko(visible: '!editing()')} (no value)
                //ko
                /ko if: editing() || error()
                - Field::kinds.each do |kind|
                  = "<!-- ko if: kind == '#{kind}' -->".html_safe
                  = render partial: field_edit_view(kind), locals: { single_editing_mode: true }
                  //ko
                //ko
              //ko
              /ko if: !writeable
              %div.site_row
                %span{ko(text: :errorMessage, validationPopover: :errorMessage), style: 'display: none;'}
                %label.field-name{ko(text: 'name', topPopover: "_('Field Code') + ': ' + code", css: { error: :error })}
                /ko if: hasValue() && !error()
                %span.value{ko(text: :valueUI)}
                /ko if: kind == 'site' && !editing() && !error()
                %button.farrow.right{ko(click: 'function(data, event) { $root.editSiteFromId(value(),$root.currentCollection().id) }'), type: "button"}
                //ko
                //ko
                /ko if: !hasValue() &&  !error()
                %span.value (no value)
                //ko
                /ko if: editing() || error()
                - Field::kinds.each do |kind|
                  = "<!-- ko if: kind == '#{kind}' -->".html_safe
                  = render partial: field_edit_view(kind), locals: { single_editing_mode: true }
                  //ko
                //ko
              //ko
              //ko
              //ko
              //ko
              //ko
    /ko if: !$root.currentSnapshot() && $root.currentCollection() && $root.currentCollection().sitesPermission.canUpdate($root.showSite())
    .tablebottom
      -# if (can? :edit, site)
      - if current_user && !current_user.is_guest
        = link_to _('Edit Site'), 'javascript:void()', class: 'icon fedit black', 'data-bind' => kov(click: 'startEditMode')
        /ko if: $root.currentCollection().canDeleteSites()
        = link_to _('Delete Site'), 'javascript:void()', class: 'icon fdelete black', 'data-bind' => kov(click: '$root.deleteSite')
        //ko
    //ko
  //ko
  //ko

  -# Loading Site...
  %form{ko(visible: :loadingSite)}
    .tableheader.w30
      %button.pback
      %span
      %span Loading...
#right-panel.right.sites{ko(css: { wp70: '!expandLeftColumn()', wp50: 'expandLeftColumn()' })}
  .mapheader
    /ko if: $root.currentCollection()
    = render 'collections/index/export'
    //ko
    %span{ko(text: :mapSitesCountText)}
    - if Settings.is_on? :alerts
      - Plugin.all.each do |plugin|
        = render_plugin_hook plugin, :map_header
    %button.icon_button.right{ko(click: '$root.togglefullscreen', css: {frestore: '$root.fullscreen()', ffullscreen: '!$root.fullscreen()'}) }
    /ko if: !editingSite()
    %button.icon_button.ftable.right{ko(click: '$root.showTable', css: {active: "!$root.showingMap()"})}
    %button.icon_button.fmap.right{ko(click: '$root.showMap', css: {active: "$root.showingMap()"})}
    //ko
    %br{clear: :all}
  %div.mapcontainer
    %button.icon_button.expand-collapse_button.oleftexpand{ko(click: '$root.toggleExpandFullScreen')}
    /ko if: $root.shouldShowLocationMissingAlert()
    %a#sites_whitout_location_alert.alert.box.flash_error.drop_shadow(href='javascript:window.model.filterByLocationMissing()')
      %span There are sites with no location set
      %span.right
        %button.fconfiguration{ko(click: '$root.filterByLocationMissing'), type: 'button'}
        %span.black Show them
      .clear
    //ko
    #map.cheight


